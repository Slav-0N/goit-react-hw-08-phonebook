{"version":3,"file":"static/js/441.c619b6ec.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","Pages/Register/Register.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\nimport {\n  FormControl,\n  InputLabel,\n  Input,\n  Button,\n  Typography,\n} from '@mui/material';\n\nimport { Notify } from 'notiflix';\nimport { NavLink } from 'react-router-dom';\n\nconst styles = {\n  form: {\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: '500px',\n    margin: '50px auto',\n  },\n  label: {\n    marginTop: '1rem',\n  },\n  input: {\n    width: '100%',\n    marginBottom: '1.5rem',\n  },\n  button: {\n    backgroundColor: '',\n    color: 'white',\n    '&:hover': {\n      backgroundColor: 'darkblue',\n    },\n  },\n};\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n  });\n  const [passwordError, setPasswordError] = useState('');\n\n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const isPasswordValid = password => {\n    return /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/.test(password);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const { name, email, password } = formData;\n\n    if (!name || !email || !password) {\n      Notify.failure('All fields are required');\n      return;\n    }\n\n    if (!isPasswordValid(password)) {\n      setPasswordError(\n        'Password must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters. For example TgeV23592, 3Greioct.'\n      );\n      return;\n    }\n\n    dispatch(register(formData))\n      .unwrap()\n      .then(originalPromiseResult => {\n        Notify.success(`${originalPromiseResult.user.name} welcome!`);\n      })\n      .catch(() => {\n        Notify.failure(\"Sorry, something's wrong\");\n      });\n\n    setFormData({\n      name: '',\n      email: '',\n      password: '',\n    });\n    setPasswordError('');\n  };\n\n  return (\n    <form style={styles.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <FormControl variant=\"outlined\">\n        <InputLabel htmlFor=\"name\">Name</InputLabel>\n        <Input\n          id=\"name\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\"Name\"\n          required\n          style={styles.input}\n          value={formData.name}\n          onChange={handleInputChange}\n          variant=\"outlined\"\n          fullWidth=\"true\"\n        />\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor=\"email\">Email</InputLabel>\n        <Input\n          id=\"email\"\n          type=\"email\"\n          name=\"email\"\n          pattern=\"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zAZ0-9-]+)*$\"\n          title=\"Email may contain letters, numbers, an apostrophe, and must be followed by '@' domain name '.' domain suffix. For example Taras@ukr.ua, adrian@gmail.com, JacobM3rcer@hotmail.com\"\n          placeholder=\"Email \"\n          required\n          style={styles.input}\n          value={formData.email}\n          onChange={handleInputChange}\n        />\n      </FormControl>\n      <FormControl>\n        <InputLabel htmlFor=\"password\">Password</InputLabel>\n        <Input\n          id=\"password\"\n          type=\"password\"\n          name=\"password\"\n          pattern=\"^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$\"\n          title=\"Password must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters. For example TgeV23592, 3Greioct.\"\n          placeholder=\"Password\"\n          required\n          style={styles.input}\n          value={formData.password}\n          onChange={handleInputChange}\n        />\n        {passwordError && (\n          <Typography color=\"error\">{passwordError}</Typography>\n        )}\n      </FormControl>\n      <Button type=\"submit\" sx={{ bgcolor: 'turquoise', mb: '20px' }}>\n        Register\n      </Button>\n      <Typography sx={{ color: 'primary' }}>\n        <NavLink to=\"/login\">or login</NavLink>\n      </Typography>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return <RegisterForm />;\n};\n\nexport default Register;\n"],"names":["styles","form","display","flexDirection","maxWidth","margin","label","marginTop","input","width","marginBottom","button","backgroundColor","color","dispatch","useDispatch","_useState","useState","name","email","password","_useState2","_slicedToArray","formData","setFormData","_useState3","_useState4","passwordError","setPasswordError","handleInputChange","e","_e$target","target","value","_objectSpread","_defineProperty","_jsxs","style","onSubmit","preventDefault","test","isPasswordValid","register","unwrap","then","originalPromiseResult","Notify","concat","user","catch","autoComplete","children","FormControl","variant","_jsx","InputLabel","htmlFor","Input","id","type","pattern","title","placeholder","required","onChange","fullWidth","Typography","Button","sx","bgcolor","mb","NavLink","to","RegisterForm"],"sourceRoot":""}